Graphs
=========
Graph is a collection of objects called as vertices and
togather with relation ship between them called as Edges

Vertices => objects
Edges => Relation between Vertices

Graph(G) = (V, E)

-> Each Edge in Graph joins two vertices
-> Vertices (V) = {A, B, C, D}
-> Edges (E) = {A-> B, A -> D, B -> C, B -> D, C -> D}

A) Directed Edge : An edge (u, v) is directed if pair (u, v) is ordered
                   with  u preceding v.
                   -> Edge is Oriented or Directed


B) Undirected Edge : An edge (u, v) is undirected if pair(u, v) is not ordered.
                     -> Edge has no orientation


    => Graph with directed edges is called directed graph
    => Graph with undirected edges is called undirected graph
    => Graph with both directed and undirected edges is called mixed graph

C) Weighted Edge: Cost or weight is assigned to each edge (u, v)

    => If all edges of directed graph is weighed then it is called weighted Di-Graph
    => If all edges of undirected graph is weighted then is Weighted undirected graph


D) End Vertices : Two vertices joined by an edge
E) Adjacent Vertices : If there is an edge between them
F) Incident Vertices : If vertices is one of the end points.
G) Outgoing Edges : Origin is the vertex
H) Incoming Edges : Destination is the vertex
I) Self Loop : if two end points are in same vertex
J) Parallel Edge : Edge from u to v (u, v) as well as v to u (v, u).


K) Degree Of Vertex - deg(V) : number of edges of the vertex
    => In-degree - indeg(v) : number of incoming edges.
    => Out-degree - outdeg(v) : number of outgoing edges

L) Path : Sequence of edges starting at onr vertex and ending at another vertex

M) Cycle : path that starts and ends at the same vertex

N) Directed Acyclic Graph : when there is no cycle in directed graph

Types
===========
1) Subgraph - whose vertices and edges are subset of vertices and edges of another graph.

2) Connected components : connected sub-graphs are known as  connected components.

3) Articulation Point : Vertex whose removal results in connected components
                        (After removal it results more than 1 graphs/ components)

4) Bi-connected components : components connected by two edges
                            (If remove one edge the graph will be still connected)

5) Strongly Connected Graphs : All the vertices are reachable fe=rom any vertex



Graph ADT
=============
=> A graph is a collection of Vertices and Edges.

 -> create(n) : Create the graph with vertices and no edges

 -> insert_edge(u, v, w=1) : creates edge from u to v

 -> remove_edges(u, v) : delete edges from u to v

 -> exist_edge(u, v) : return true if edge exits between u and v, else false

 -> Vertex_count() : return the number of vertices in the graph

 -> edge_count() : return number of edges in the graph

 -> vertices() : return all the vertices in the graph

 -> edges() : return all edges of graphs

 -> degree(u) : return the degree of the vertex u

  -> indegree(u) : returns the in-degree of vertex u

  -> outdegree(u) : returns the out-degree of vertex u





Graph Representation :
========================================================
A graph can be reprinted using different data structures

=> Edge List : Maintains list of all edges
=> Adjacency List : For each vertex separate list of edges is maintained
=> Adjacency Matrix : maintain the matrix of vertices ,
                  where each cell stores the reference to the object.




Time Complexity of Edge List
=========================================================
    Vertexes = n, Edges = m

     -> insert_edge(u, v, w=1) : O(1)

     -> remove_edges(u, v) : O(1)

     -> exist_edge(u, v) : O(n)

     -> Vertex_count() : O(1)

     -> edge_count() : O(1)

     -> vertices() : O(1)

     -> edges() : O(m)

     -> degree(u) : O(m)

    -> Space Complexity => O(n + m)


    Weighted Directed Graph
    ============================
    Vertices  Edges(will have reference of vertexes)
    --------   --------------------
    v1          u -> v1, u -> v2
    v2          v -> v2, v -> v3
    v3          w -> v1, w -> v1
    v4          x -> v3, x -> v4





Adjacency List
==============================================
    Vertexes = n, Edges = m

     -> insert_edge(u, v, w=1) : O(1)

     -> remove_edges(u, v) : O(1)

     -> exist_edge(u, v) : O(min(deg(u), deg(v)))

     -> Vertex_count() : O(1)

     -> edge_count() : O(1)

     -> vertices() : O(1)

     -> edges() : O(m)

     -> degree(u) : O(m)

    -> Space Complexity => O(n + m)


    Ex: Directed Graph
    ===================
    Vertices
    ---------
    A --> B -> C
    B --> C
    C --> D
    D

    Ex: Weighted Directed Graph
    =================
    Here Weights are r, s, t, x for A->B, A->C, B->C, C->D respectively
    Vertices
    ---------
    A --> B/r -> C/s
    B --> C/t
    C --> D/x
    D

    Ex: Undirected Graph
    ====================
    Vertices
    ----------
    A --> B -> C (A connected to B and A connected to C)
    B --> A -> C
    C --> A -> B -> C
    D --> C



Adjacency Matrix
==========================================
    Lets take 4 vertices A(0), B(1), C(2), D(3)

        0  1  2  3

    0   *  *  *  *
    1   *  *  *  *
    2   *  *  *  *
    3   *  *  *  *

    Here if there is a edge then the value of * will be 1 else 0

   Directed Graph
   =================
    Here Weights are A->B, A->C, B->C, C->D respectively

        0  1  2  3

    0   0  1  1  0
    1   0  0  1  0
    2   0  0  0  1
    3   0  0  0  0

    Weighted Directed Graph
    ========================
    Here Weights are r, s, t, x for A->B, A->C, B->C, C->D respectively
        0  1  2  3

    0   0  r  s  0
    1   0  0  t  0
    2   0  0  0  x
    3   0  0  0  0


    Weighted Undirected Graph
    ============================
        0  1  2  3

    0   0  1  1  0
    1   1  0  1  0
    2   1  1  0  1
    3   0  0  1  0

    Weighted Undirected Graph
    ============================
    Here Weights are r, s, t, x for A-B, A-C, B-C, C-D respectively

        0  1  2  3

    0   0  r  s  0
    1   r  0  t  0
    2   s  t  0  x
    3   0  0  x  0


    => Time Complexity
    -----------------------
    Vertexes = n, Edges = m

     -> insert_edge(u, v, w=1) : O(1)

     -> remove_edges(u, v) : O(1)

     -> exist_edge(u, v) : O(1)

     -> Vertex_count() : O(1)

     -> edge_count() : O(1)

     -> vertices() : O(n)

     -> edges() : O(m)

     -> degree(u) : O(u)

    -> Space Complexity => O(n ^ 2)




Graph Traversal
===============================================
Traversal is a  systematic process of exploring a graph
Exploring - Examining all the vertices and edges of graph
Efficient Traversal: Visits to all the vertices and edges in linear time


Graph Traversal - Undirected Graph
---------------------------------
-> computing a path from one vertex to another vertex
-> Compute path to reach all other vertices
-> Find Whether a graph is connected
-> Computing connected components of the graph
-> Computing cycle int he graph
-> Computing spanning tree in the graph


Directed Graphs
------------------
-> Computing directed path from one vertex to another vertex
-> Finding all the vertices that can be reachable from given vertex
-> Determine whether a graph is strongly connected
-> Determine whether a graph is acyclic


There are two graph traversing algorithms
---------------------------------------
=> Breath-First search
=> Depth-First search


Breath-First Search
======================
-> Breath-First Search subdivides the vertices into levels and proceeds in rounds.
-> Starts at a vertex, which is considered at level 0
-> Identifies all the vertices reachable from starts vertex at level 1,
marks them visited.
-> In nxt round identifies new vertices from level 1 vertices which are not yet visited,
marks them visited.
-> This process continue until no vertices are found.


Algorithm
------------
function BFS(s)
    i = s, 1 = Queue(), visited [] = [0, 0, 0, ..., n+1]
    print(i)
    visited[i] = 1
    q.enqueue(i)
    while !q.isempty() then
        i = q.dequeue()
        for (j=0;j < n, j ++)
            if adjMat[i][j] ==1 &&& visited[j]==0 then
                print(j)
                visited[j] = 1
                q.enqueue(j)



Depth-First Search
========================
-> It starts at a vertex
-> Select the adjacent vertex from the start
-> Visit the adjacent vertex , marked ass visited
-> Continue the above procedure, until there are no more unexplored edges,
then terminate


Algorithm
---------------
function DFS(s)
    if visited[s] == 0
    print(s)
    visited[s] == 1
    for j = 0; j < n; j ++
        if adjmats[j] == 1 && visited[j] == 0 then
            DEF(j)